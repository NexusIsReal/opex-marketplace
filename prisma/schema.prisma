generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  username              String                 @unique
  email                 String                 @unique
  password              String
  fullName              String?
  role                  Role                   @default(USER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  active                Boolean                @default(true)
  emailVerified         DateTime?
  freelancerApplication FreelancerApplication?
  receivedMessages      Message[]              @relation("ReceivedMessages")
  sentMessages          Message[]              @relation("SentMessages")
  profile               Profile?
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?  @db.Text
  avatarUrl String?
  skills    String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FreelancerApplication {
  id          String             @id @default(cuid())
  userId      String             @unique
  category    FreelancerCategory
  skills      String             @db.LongText
  experience  Int
  portfolio   String?            @db.Text
  coverLetter String             @db.Text
  status      ApplicationStatus  @default(PENDING)
  adminNotes  String?            @db.Text
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id            String   @id @default(cuid())
  content       String   @db.Text
  senderId      String
  receiverId    String
  read          Boolean  @default(false)
  applicationId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  receiver      User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender        User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([receiverId], map: "Message_receiverId_fkey")
  @@index([senderId], map: "Message_senderId_fkey")
}

enum Role {
  USER
  FREELANCER
  ADMIN
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  INTERVIEW
}

enum FreelancerCategory {
  FRONT_END_DEVELOPER
  BACK_END_DEVELOPER
  FULL_STACK_DEVELOPER
  BOT_DEVELOPER
  SOFTWARE_DEVELOPER
}
